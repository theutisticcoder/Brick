(()=>{const getWorkingWindow=()=>{const workingWindow=window['workingWindow'];if(workingWindow!=null){return workingWindow;}
return window;};const PROP_ANIMATIONS_JSON='animations_json';const PROP_RESOURCE_BASE_URL='resource_base_url';const VALIDATE_CHARACTER_3D_BLEND_DURATION_FUNCTION_NAME='validateCharacter3dBlendDuration';(()=>{const workingWindow=getWorkingWindow();if(typeof(workingWindow[VALIDATE_CHARACTER_3D_BLEND_DURATION_FUNCTION_NAME])!=='function'){workingWindow[VALIDATE_CHARACTER_3D_BLEND_DURATION_FUNCTION_NAME]=(blendDuration,previousActionStartTime,actionStartTime)=>{const tolerance=0.01;return Math.min(blendDuration,actionStartTime-previousActionStartTime-tolerance);};}})();const getActionBlendDuration=(action)=>{const blendDuration=action.blendDuration;if(blendDuration!=null){return blendDuration;}
return 0;};if(window.customElements.get('character-3d')==null){'use strict';const FACE_CAMERA_HEAD_ORIENTATION='face camera';const HORIZONTAL_HEAD_ORIENTATION='horizontal';const FOLLOW_PREVIOUS_ACTION_HEAD_ORIENTATION='follow previous action';const isSingleFrameForActionProperties=(originalDuration,playCount,startRatio,endRatio)=>{const workingWindow=getWorkingWindow();const WebDiagramBabylonJsBridge=workingWindow['WebDiagramBabylonJsBridge'];if(WebDiagramBabylonJsBridge==null){return false;}
return WebDiagramBabylonJsBridge['isSingleFrameAction'](originalDuration,playCount,startRatio,endRatio);};const isSingleFrameForAction=(action)=>{const actionActualDuration=getActionActualDuration(action);const playCount=action.playCount;const startRatio=action.startRatio||0;const endRatio=action.endRatio||1;return isSingleFrameForActionProperties(actionActualDuration,playCount,startRatio,endRatio);};const createTweenWithEnterAndExitCallback=(duration,tweenEntered,tweenExited,isNotExitOnSeekBackward=null,isNotExitOnComplete=null)=>{const tween=gsap.to({progress:0},{progress:1,duration:duration,onStart:()=>{tweenEntered(tween);},onComplete:()=>{if(!isNotExitOnComplete||!isNotExitOnComplete()){tweenExited();}},onUpdate:()=>{if(tween.progress()===0&&(!isNotExitOnSeekBackward||!isNotExitOnSeekBackward())){tweenExited();}else{tweenEntered(tween);}}});return tween;};const CHARACTER_3D_PREVIEW_CLASS_NAME='character-3d-preview';const CHARACTER_3D_LOADING_URL='https://cdn-latest.visual-paradigm.com/diagrams/js/character-3d/loading.svg';const cloneObject=(obj)=>{const jsonString=JSON.stringify(obj);return JSON.parse(jsonString);};const getActionActualDuration=(action)=>{const duration=action.duration;const startRatio=action.startRatio||0;const endRatio=action.endRatio||1;const trimmedStartDuration=duration*startRatio;const trimmedEndDuration=duration*(1-endRatio);return duration-trimmedStartDuration-trimmedEndDuration;};const getActionActualDurationConsiderIncompleteAction=(action)=>{const duration=getActionActualDuration(action);const playCount=action.playCount;if(playCount<1){return duration*playCount;}
return duration;};const getActionDurationWithPlayCount=(action)=>{const actionDuration=getActionActualDuration(action);if(Number.isInteger(action.playCount)){return actionDuration;};const durationWithPlayCount=(action.playCount-Math.floor(action.playCount))*actionDuration;return durationWithPlayCount;};class Character3D extends HTMLElement{static get observedAttributes(){return[PROP_ANIMATIONS_JSON];}
useCharacterAction(action){const localCharacter=this.character;if(localCharacter!=null){action(localCharacter);}}
cellStateStartResize(){this.useCharacterAction((characterParameter)=>{characterParameter.cellStateStartResize();});}
cellStateResetResize(forCancel){this.useCharacterAction((characterParameter)=>{characterParameter.cellStateResetResize(forCancel);});}
cellStateFireCellResizedWithVertexHandler(cellStateBounds){this.useCharacterAction((characterParameter)=>{characterParameter.cellStateFireCellResizedWithVertexHandler(cellStateBounds);});}
createWaitForLoadedFromChangedAnimationsJsonQueue(){const result={};const requests=[];result.endLoadFromChangedAnimationsJson=function(){requests.forEach((eachRequest)=>{const{resolve}=eachRequest;resolve();});};result.addRequest=()=>{return new Promise((resolve,reject)=>{requests.push({resolve});});};return result;}
beginLoadFromChangedAnimationsJson(){this.waitForLoadedFromChangedAnimationsJsonQueue=this.createWaitForLoadedFromChangedAnimationsJsonQueue();}
endLoadFromChangedAnimationsJson(){this.waitForLoadedFromChangedAnimationsJsonQueue.endLoadFromChangedAnimationsJson();delete this.waitForLoadedFromChangedAnimationsJsonQueue;}
checkWaitForLoadedFromChangedAnimationsJson(){let nextPromise=null;const localWaitForLoadedFromChangedAnimationsJsonQueue=this.waitForLoadedFromChangedAnimationsJsonQueue;if(localWaitForLoadedFromChangedAnimationsJsonQueue!=null){nextPromise=localWaitForLoadedFromChangedAnimationsJsonQueue.addRequest();}else{nextPromise=Promise.resolve();}
return nextPromise;}
clearBlendActions(){this.iterateBlendActionIds((eachBlendActionId)=>{const blendActionObject=this.getActionObject(eachBlendActionId);if(blendActionObject!=null){this.deleteFromIdActionObjectMap(eachBlendActionId);blendActionObject.destroy();}});this.clearBlendActionIds();}
clearActions(){this.clearBlendActions();delete this.actionObjectSought;this.clearCurrentAction();this.clearCurrentActionObject();this.iterateActions((eachAction)=>{const actionId=eachAction.id;const actionObject=this.getActionObject(actionId);if(actionObject!=null){this.deleteFromIdActionObjectMap(actionId);actionObject.destroy();}});delete this.actions;}
loadBlendAction(elementCharacter3dController,previousActionObject,actionObject,startTime,duration,easing,previousActionStartTime,previousActionSpeed,actionSpeed){return elementCharacter3dController.loadBlendAction(previousActionObject,actionObject,startTime,duration,easing,previousActionStartTime,previousActionSpeed,actionSpeed);}
loadAction(elementCharacter3dController,eachAction){const characterFamilyName=this.getCharacterFamilyName();const characterAssetId=this.getCharacterAssetId();return elementCharacter3dController.loadAction(this.character,eachAction,characterFamilyName,characterAssetId,this.actions);}
postSetActionsAction(){this.sortActionsByStartTime();this.normalizedActions=this.calculateNormalizedActions();}
addRequestToWaitForCharacterLoadedQueue(resolve){this.waitForCharacterLoadedQueue.addRequest(resolve);}
checkWaitForCharacterReady(){return new Promise((resolve,reject)=>{if(this.character!=null){resolve();return;}
if(this.waitForCharacterLoadedQueue==null){this.waitForCharacterLoadedQueue=this.createWaitForCharacterLoadedQueue();}
this.addRequestToWaitForCharacterLoadedQueue(resolve);});}
createWaitForCharacterLoadedQueue(){const result={};const requests=[];result.endLoadCharacter=function(){requests.forEach((eachRequest)=>{const{resolve}=eachRequest;resolve();});};result.addRequest=(resolve)=>{requests.push({resolve});};return result;};attributeChangedCallback(name,oldValue,newValue){if(name===PROP_ANIMATIONS_JSON&&oldValue!=null){const characterReadyAction=()=>{const localAttributeChangedCallbackTimerId=this.attributeChangedCallbackTimerId;if(localAttributeChangedCallbackTimerId!=null){delete this.attributeChangedCallbackTimerId;window.clearTimeout(localAttributeChangedCallbackTimerId);}
const delay=50;this.attributeChangedCallbackTimerId=window.setTimeout(()=>{delete this.attributeChangedCallbackTimerId;this.checkWaitForLoadedFromChangedAnimationsJson().then(()=>{if(this.character==null){return;}
this.clearTimeline();this.clearActions();this.destroyCharacter();delete this.character;this.actions=this.getActionsPropertyValue();this.postSetActionsAction();this.beginLoadFromChangedAnimationsJson();const workingWindow=getWorkingWindow();const localCharacter3dController=workingWindow.character3dController;localCharacter3dController.fromElement(this).then((elementCharacter3dController)=>{const characterAssetId=this.getCharacterAssetId();const characterFamilyName=this.getCharacterFamilyName();const texture=this.getTexture();const flipH=this.getFlipH();const flipV=this.getFlipV();return elementCharacter3dController.loadCharacter(characterAssetId,characterFamilyName,flipH,flipV,texture,this);}).then((characterParameter)=>{this.character=characterParameter;return this.characterLoaded();}).then(()=>{return this.loadAllBlendActions();}).then(()=>{return this.buildTimelineForActions();}).then(()=>{return this.setVisibleAsPromise(true);}).then(()=>{this.synchronizeCharacterBounds();this.setCharacterApi(this.api);this.fireCharacterReloaded();}).catch((errorMessage)=>{console.error(errorMessage);}).finally(()=>{this.endLoadFromChangedAnimationsJson();});}).catch((errorMessage)=>{console.error(errorMessage);});},delay);};this.checkWaitForCharacterReady().then(()=>{characterReadyAction();}).catch((errorMessage)=>{console.error(errorMessage);});}}
calculateNormalizedActions(){let result=[];const addActionToResult=(action)=>{result.push(action);};this.iterateActions((eachAction)=>{const playCount=eachAction.playCount;if(playCount===1){if(eachAction.endRatio<1){const normalizedAction=cloneObject(eachAction);normalizedAction.pauseWhenEnd=true;addActionToResult(normalizedAction);}else{addActionToResult(eachAction);}
return;}
if(playCount<1){const duration=getActionActualDuration(eachAction);const normalizedAction=cloneObject(eachAction);normalizedAction.playCount=1;normalizedAction.duration=duration*playCount;normalizedAction.startRatio=0;normalizedAction.endRatio=1;normalizedAction.pauseWhenEnd=true;addActionToResult(normalizedAction);return;}
addActionToResult(eachAction);let remainingPlayCount=playCount-1;const startTime=eachAction.startTime;const duration=getActionActualDuration(eachAction);const endTime=startTime+duration;let normalizedActionStartTime=endTime;const handleEachRepeatAction=()=>{const normalizedAction=cloneObject(eachAction);normalizedAction.playCount=1;normalizedAction.startTime=normalizedActionStartTime;normalizedAction.repeatForAction=eachAction;if(remainingPlayCount<1){normalizedAction.duration=duration*remainingPlayCount;normalizedAction.pauseWhenEnd=true;normalizedAction.startRatio=0;normalizedAction.endRatio=1;}else{normalizedActionStartTime+=duration;}
addActionToResult(normalizedAction);remainingPlayCount-=1;};while(remainingPlayCount>0){handleEachRepeatAction();}});return result;}
playTimeline(){this.timeline.play();}
pauseTimeline(){this.timeline.pause();}
playing=false;isPlaying(){return this.playing;}
play(){this.playing=true;return new Promise((resolve,reject)=>{this.playTimeline();const localCurrentActionObject=this.currentActionObject;if(localCurrentActionObject!=null){localCurrentActionObject.play().then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});}else{resolve();}});}
pause(){this.playing=false;return new Promise((resolve,reject)=>{this.pauseTimeline();const localCurrentActionObject=this.currentActionObject;if(localCurrentActionObject!=null){localCurrentActionObject.pause().then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});}else{resolve();}});}
getTimelineChildren(){return this.timeline.getChildren();}
iterateTimelineChildren(delegate){this.getTimelineChildren().forEach((eachChild)=>{delegate(eachChild);});}
triggerTimelineChildrenForceExit(){this.iterateTimelineChildren((eachChild)=>{if(typeof(eachChild.forceExit)==='function'){eachChild.forceExit();}});}
seekTimeline(time,suppressEvents,timeRelativeToCharacter){this.timeline.seek(time,suppressEvents);if(timeRelativeToCharacter<time&&time-timeRelativeToCharacter>0.0001){this.triggerTimelineChildrenForceExit();}}
findNormalizedAction(delegate){return this.normalizedActions.find(delegate);};findNormalizedActionForTime(time){const forcedNormalizedActionForTime=this.findForcedNormalizedActionForTime(time);if(forcedNormalizedActionForTime!=null){return forcedNormalizedActionForTime;}
const actionCount=this.getActionCount();let result=this.findNormalizedAction((eachAction,indexOfEachAction)=>{if(this.isActionEnabled(eachAction)===false){return false;}
const startTime=eachAction.startTime;const duration=getActionActualDuration(eachAction);const endTime=startTime+duration;const isLastAction=indexOfEachAction===actionCount-1;if(isLastAction){return time>=startTime&&time<=endTime;}
return time>=startTime&&time<endTime;});if(result!=null&&this.isPlaying()===false){const endBlendAction=result.endBlendAction;if(endBlendAction!=null&&time>=endBlendAction.startTime){result=endBlendAction;}}
return result;}
findForcedNormalizedActionForTime(time){return this.character.findForcedNormalizedActionForTime(this.normalizedActions,time);}
isActionEnabled(action){return this.character.isActionEnabled(action);}
pauseCurrentActionObject(){return this.currentActionObject.pause();}
hasCurrentActionObject(){return this.currentActionObject!=null;}
clearCurrentAction(){delete this.currentAction;}
clearCurrentActionObject(){delete this.currentActionObject;}
seekWithoutSeekTimeline(time,preferredSeekToAction){const shouldSeekTimeline=false;return this.seek(time,shouldSeekTimeline,preferredSeekToAction);}
hasCurrentAction(){return this.currentAction!=null;}
getCurrentActionId(){return this.currentAction.id;}
getCurrentActionStartTime(){return this.currentAction.startTime;}
getActionObjectForCurrentActionId(){const currentActionId=this.getCurrentActionId();return this.getActionObject(currentActionId);};seekCurrentActionObject(time){return this.currentActionObject.seek(time);}
playCurrentActionObject(){return this.currentActionObject.play();}
findClosestPreviousAction(time){let result=null;this.everyAction((eachAction)=>{let proceed=true;const actionEndTime=eachAction.startTime+getActionActualDurationConsiderIncompleteAction(eachAction);if(time>=actionEndTime){result=eachAction;}else{proceed=false;}
return proceed;});return result;}
setActionObjectSought(actionObject){this.actionObjectSought=actionObject;}
setActionObjectSoughtAsCurrentActionObject(){this.setActionObjectSought(this.currentActionObject);}
initForSeekCapture(){const animationsJsonAttributeValue=this.getAnimationsJsonAttributeValue();const representativeString=animationsJsonAttributeValue;const timelineDuration=this.getTimelineDuration();this.character.initForSeekCapture(representativeString,timelineDuration);}
seekAnimateFaceMorphsHandler(time){this.character.seekAnimateFaceMorphsHandler(time);}
seek(time,shouldSeekTimeline=true,preferredSeekToAction,timeRelativeToCharacter){this.lastSeekTime=time;return new Promise((resolve,reject)=>{this.checkWaitForLoadedFromChangedAnimationsJson().then(()=>{if(this.alreadyDestroyed||this.character==null){resolve();return;}
this.seekAnimateFaceMorphsHandler(time);const oldActionObjectSought=this.actionObjectSought;delete this.actionObjectSought;const seekClosestPreviousActionObjectToItsDuration=()=>{const closestPreviousAction=this.findClosestPreviousAction(time);if(closestPreviousAction!=null){const actionId=closestPreviousAction.id;const actionDuration=getActionDurationWithPlayCount(closestPreviousAction);const actionObjectOfClosestPreviousAction=this.getActionObject(actionId);if(actionObjectOfClosestPreviousAction==null){return;}
this.setActionObjectSought(actionObjectOfClosestPreviousAction);actionObjectOfClosestPreviousAction.seek(actionDuration).then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});}else{resolve();}}
const newAction=(()=>{const normalizedActionForTime=this.findNormalizedActionForTime(time);if(preferredSeekToAction==null){return normalizedActionForTime;}
if(normalizedActionForTime===preferredSeekToAction){return normalizedActionForTime;}
if(normalizedActionForTime!=null&&normalizedActionForTime.isBlendAction){if(normalizedActionForTime.previousAction===preferredSeekToAction||normalizedActionForTime.currentAction===preferredSeekToAction){return normalizedActionForTime;}}
return preferredSeekToAction;})();const currentActionChanged=async()=>{if(this.hasCurrentActionObject()){if(this.isPlaying()){await this.pauseCurrentActionObject();}
this.clearCurrentActionObject();}
const handleHasCurrentAction=()=>{this.currentActionObject=this.getActionObjectForCurrentActionId();if(this.currentActionObject==null){return;}
const startTime=this.getCurrentActionStartTime();const timeRelativeToAction=time-startTime;const handleSeekCurrentActionObjectDone=()=>{let nextPromise=null;if(this.isPlaying()){nextPromise=this.playCurrentActionObject();}else{nextPromise=Promise.resolve();}
return nextPromise;};this.setActionObjectSoughtAsCurrentActionObject();this.seekCurrentActionObject(timeRelativeToAction).then(()=>{return handleSeekCurrentActionObjectDone();}).then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});};if(this.hasCurrentAction()){handleHasCurrentAction();}else if(this.isPlaying()===false){seekClosestPreviousActionObjectToItsDuration();}};const currentActionNotChangedAndHasCurrentActionObject=()=>{const startTime=this.currentAction.startTime;const timeRelativeToAction=time-startTime;this.setActionObjectSoughtAsCurrentActionObject();this.seekCurrentActionObject(timeRelativeToAction).then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});};if(newAction!=this.currentAction){this.currentAction=newAction;currentActionChanged();}else if(this.hasCurrentActionObject()){currentActionNotChangedAndHasCurrentActionObject();}else if(this.isPlaying()===false){seekClosestPreviousActionObjectToItsDuration();}
if(shouldSeekTimeline){const suppressEvents=false;this.seekTimeline(time,suppressEvents,timeRelativeToCharacter);}
if(oldActionObjectSought!=null&&this.actionObjectSought==null&&this.isPlaying()===false){oldActionObjectSought.reset();}}).catch((errorMessage)=>{reject(errorMessage);});});}
idActionObjectMap=(()=>{const result={};const map=new Map();result.set=(actionId,actionObject)=>{map.set(actionId,actionObject);};result.get=(actionId)=>{return map.get(actionId);};result.delete=(actionId)=>{map.delete(actionId);};return result;})();ensureReadyForSeekCapture(){const self=this;return new Promise((resolve,reject)=>{const localCharacter=self.character;if(localCharacter==null){reject('Character is null');return;}
const localActions=self.actions;if(localActions==null||localActions.length===0){resolve();return;}
localCharacter.ensureReadyForSeekCapture(localActions).then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});});}
getActionObject(actionId){return this.idActionObjectMap.get(actionId);}
setToIdActionObjectMap(actionId,actionObject){this.idActionObjectMap.set(actionId,actionObject);}
deleteFromIdActionObjectMap(actionId){this.idActionObjectMap.delete(actionId);}
addBlendActionId(blendActionId){this.allBlendActionIds.add(blendActionId);}
iterateBlendActionIds(delegate){this.allBlendActionIds.iterate(delegate);}
clearBlendActionIds(){this.allBlendActionIds.clear();}
actionLoaded(actionId,actionObject){this.setToIdActionObjectMap(actionId,actionObject);}
getDuration(){return 10;}
createTimeline(){return gsap.timeline({paused:true});}
getAnimationsJsonAttributeValue(){return this.getAttribute(PROP_ANIMATIONS_JSON);}
getResourceBaseUrlAttributeValue(){return this.getAttribute(PROP_RESOURCE_BASE_URL);}
getAnimationsJsonObject(){const animationsJsonAttributeValue=this.getAnimationsJsonAttributeValue();const localCachedAnimationJsonObject=this.cachedAnimationsJsonObject;if(localCachedAnimationJsonObject!=null){if(localCachedAnimationJsonObject.isValid(animationsJsonAttributeValue)===false){localCachedAnimationJsonObject.dispose();delete this.cachedAnimationsJsonObject;}else{return localCachedAnimationJsonObject.getValue();}}
const jsonObject=JSON.parse(animationsJsonAttributeValue);this.cachedAnimationsJsonObject=(()=>{const cachedValue={};cachedValue.isValid=(newAnimationsJsonAttributeValue)=>{return newAnimationsJsonAttributeValue===animationsJsonAttributeValue;};cachedValue.dispose=()=>{};cachedValue.getValue=()=>{return jsonObject;};return cachedValue;})();return jsonObject;}
addMouseDownListener(mouseDownListener){this.addEventListener('mousedown',mouseDownListener);}
removeMouseDownListener(mouseDownListener){this.removeEventListener('mousedown',mouseDownListener);}
useStyleAction(delegate){const localStyle=this.style;return delegate(localStyle);}
mapActions(delegate){return this.actions.map(delegate);}
destroyCharacter(){this.character.destroy();}
alreadyDestroyed=false;destroy(){if(this.alreadyDestroyed){return;}
this.alreadyDestroyed=true;this.checkWaitForCharacterReady().then(()=>{if(this.positionAnimationSession!=null){this.disposePositionAnimationSession();}
this.clearHeadOrientationRegister()
this.clearTimeline();this.killTimeline();const audioUrls=null;this.disposeNonUsingSounds(audioUrls);this.clearActions();if(this.loadedCharacter){this.destroyCharacter();delete this.character;}
delete this.api;}).catch((errorMessage)=>{console.error(errorMessage);});}
getActionCount(){return this.actions.length;}
getActionAt(index){return this.actions[index];}
characterLoaded(){const self=this;return new Promise((resolve,reject)=>{const actionCount=self.getActionCount();const originalActions=self.actions;let nextActionIndex=0;const performHandleNextActionIndex=()=>{return new Promise((resolve,reject)=>{if(self.actions!==originalActions){reject();return;}
const eachAction=self.getActionAt(nextActionIndex);const workingWindow=getWorkingWindow();const localCharacter3dController=workingWindow.character3dController;const actionId=eachAction.id;const assetPath=eachAction.assetPath;localCharacter3dController.fromElement(this).then((elementCharacter3dController)=>{if(self.actions!==originalActions){reject();return;}
return this.loadAction(elementCharacter3dController,eachAction);}).then((actionObject)=>{this.actionLoaded(actionId,actionObject);resolve();}).catch((errorMessage)=>{reject(errorMessage);});});};const handleNextActionIndex=()=>{if(nextActionIndex===actionCount){resolve();return;}
performHandleNextActionIndex().then(()=>{nextActionIndex++;handleNextActionIndex();}).catch((errorMessage)=>{console.error(errorMessage);nextActionIndex++;handleNextActionIndex();});};handleNextActionIndex();});}
createSoundsRepository(){const result={};const map=new Map();const calculateKey=(audioUrl,audioInfos)=>{let key=audioUrl;if(audioInfos.characterFamilyName!=null){key+='\n'+audioInfos.characterFamilyName;}
if(audioInfos.blendShapes!=null){key+='\n'+'blendShapes';}
if(audioInfos.spectrum!=null){key+='\n'+'spectrum';}
key+='\n'+(audioInfos.trimmedStartTime||0);key+='\n'+(audioInfos.trimmedEndTime||0);key+='\n'+audioInfos.duration;return key;};result.getSound=(audioUrl,audioInfos)=>{const key=calculateKey(audioUrl,audioInfos);return map.get(key);};result.addSound=(audioUrl,sound,audioInfos)=>{const key=calculateKey(audioUrl,audioInfos);map.set(key,sound);};result.disposeNonUsingSounds=(audioUrlsAndInfos)=>{const audioUrlsAsMap=(()=>{const mapResult={};const internalMap=new Map();const EXISTS_VALUE=true;if(audioUrlsAndInfos!=null&&audioUrlsAndInfos.length>0){audioUrlsAndInfos.forEach((eachAudioUrlAndInfos)=>{const{id,audioId,pageAnimationAudioId,startTime,duration,name,trimmedStartTime,trimmedEndTime,volume,audioUrl,audioDuration,characterFamilyName,text,voiceModel,blendShapes,spectrum}=eachAudioUrlAndInfos;const audioInfos={id,audioId,pageAnimationAudioId,startTime,duration,name,trimmedStartTime,trimmedEndTime,volume,audioUrl,audioDuration,characterFamilyName,text,voiceModel,blendShapes,spectrum};const key=calculateKey(audioUrl,audioInfos);internalMap.set(key,EXISTS_VALUE);});}
mapResult.exists=(key)=>{return internalMap.get(key)===EXISTS_VALUE;};return mapResult;})();map.forEach((sound,key)=>{if(audioUrlsAsMap.exists(key)===false){map.delete(key);sound.dispose();}});};return result;}
createPointerEventDetectionElement(){const result=document.createElement('div');result.className='character-3d-pointer-event-detection-element';const updateStyle=(style)=>{style.position='absolute';style.pointerEvents='all';style.left='0px';style.top='0px';style.width='100%';style.height='100%';};updateStyle(result.style);result.setBounds=function(x,y,width,height){const selfStyle=this.style;selfStyle.left=`${x}px`;selfStyle.top=`${y}px`;selfStyle.width=`${width}px`;selfStyle.height=`${height}px`;};return result;}
constructor(){super();this.allBlendActionIds=this.createAllBlendActionIds();this.soundsRepository=this.createSoundsRepository();const initialImage=this.getInitialImage();if(initialImage!=null){this.insertAdjacentHTML('beforeend',`<div class="${CHARACTER_3D_PREVIEW_CLASS_NAME}" style='width: 100%; height: 100%; background-size: contain; background-repeat: no-repeat; background-position: center; background-image: url("${initialImage}");'>`);}
this.useStyleAction((styleParameter)=>{styleParameter.position='absolute';styleParameter.pointerEvents='none';});this.pointerEventDetectionElement=this.createPointerEventDetectionElement();this.appendChild(this.pointerEventDetectionElement);const workingWindow=getWorkingWindow();this.loadedCharacter=!workingWindow['NO_UI']&&!this.closest('div[embed="true"]');if(this.loadedCharacter){new Promise((resolve,reject)=>{if(workingWindow.ensureCharacter3dController!=null){resolve();return;}
const checkReady=()=>{if(workingWindow.ensureCharacter3dController==null){setTimeout(checkReady,200);return;}
resolve();};setTimeout(checkReady,200);}).then(()=>{return workingWindow.ensureCharacter3dController();}).then(()=>{this.timeline=this.createTimeline();this.loadFromAnimationsJsonObject();}).catch((errorMessage)=>{console.error(errorMessage);});}}
createAllBlendActionIds(){const result={};let array=[];result.add=(eachBlendActionId)=>{array.push(eachBlendActionId);};result.iterate=(delegate)=>{if(array.length>0){array.forEach((eachBlendActionId)=>{delegate(eachBlendActionId);});}};result.clear=()=>{array=[];};return result;}
hidePreview(){const previewElement=this.querySelector(`.${CHARACTER_3D_PREVIEW_CLASS_NAME}`);if(previewElement!=null){previewElement.remove();}}
sortActionsByStartTime(){this.actions.sort((actionOne,actionTwo)=>{return actionOne.startTime-actionTwo.startTime;});}
everyAction(delegate){this.actions.every((eachAction)=>{return delegate(eachAction);});}
findAction(delegate){return this.actions.find((eachAction)=>{return delegate(eachAction);});}
findActionById(actionId){return this.findAction((eachAction)=>{return eachAction.id===actionId;});}
getNormalizedActionAt(index){return this.normalizedActions[index];}
iterateNormalizedActions(delegate){this.normalizedActions.forEach((eachAction)=>{delegate(eachAction);});}
iterateActions(delegate){this.actions.forEach((eachAction,indexOfEachAction,allActions)=>{delegate(eachAction,indexOfEachAction,allActions);});}
timelineTo(targets,properties,startTime){this.timeline.to(targets,properties,startTime);}
timelineCall(callback,time){const parameters=null;this.timeline.call(callback,parameters,time);}
disposePositionAnimationSession(){this.positionAnimationSession.dispose();delete this.positionAnimationSession;}
buildMoveCharacterByActionsTimeline(playheadTime,externalTimeline,positions,zoomRatio){if(this.positionAnimationSession!=null){this.disposePositionAnimationSession();}
const allTweens=[];const localCharacter=this.character;if(positions!=null&&positions.length>0){this.synchronizeCharacterBounds();const ownerForCreatePositionAnimationSession={animationUpdated:()=>{if(this.character==null){return;}
const selfBounds=this.getBoundingClientRect();const x=selfBounds.x;const y=selfBounds.y;const width=selfBounds.width;const height=selfBounds.height;this.updatePointerEventDetectionElementBounds(x,y,width,height);}};const localPositionAnimationSession=localCharacter.createPositionAnimationSession(externalTimeline,ownerForCreatePositionAnimationSession);this.positionAnimationSession=localPositionAnimationSession;positions.forEach((eachPosition,eachPositionIndex)=>{const distance=eachPosition.distance
const angle=eachPosition.angle
const xDistance=(()=>{return distance*zoomRatio*Math.cos(angle);})();const yDistance=(()=>{return distance*zoomRatio*Math.sin(angle);})();const startTime=eachPosition.startTime;const duration=eachPosition.duration;const prevPositionIndex=eachPositionIndex-1;const prevPosition=positions[prevPositionIndex];const prevEndTime=prevPosition!=null?prevPosition.startTime+prevPosition.duration:null;const positionAnimation=localPositionAnimationSession.createPositionAnimation(xDistance,yDistance,duration,prevEndTime);const obj={progress:0};let externalTimelineIsActiveStatus=false;const eachTween=gsap.to(obj,{progress:1,duration:duration,onUpdate:()=>{const newExternalTimelineIsActiveStatus=externalTimeline.isActive();if(newExternalTimelineIsActiveStatus!==externalTimelineIsActiveStatus){externalTimelineIsActiveStatus=newExternalTimelineIsActiveStatus;const tweenProgress=eachTween.progress();positionAnimation.progress(tweenProgress);if(externalTimelineIsActiveStatus){positionAnimation.play();}}else if(newExternalTimelineIsActiveStatus===false){const tweenProgress=eachTween.progress();positionAnimation.progress(tweenProgress);}},onComplete:()=>{const tweenProgress=eachTween.progress();positionAnimation.progress(tweenProgress);}});allTweens.push(eachTween);externalTimeline.add(eachTween,startTime);});this.synchronizeCharacterBounds();localPositionAnimationSession.reset();allTweens.forEach((eachTween)=>{if(playheadTime>=eachTween.startTime()+eachTween.duration()){eachTween.progress(1);}});}else{localCharacter.clearCurrentPositionAnimationSession();}}
timelineAddTween(tween,startTime){this.timeline.add(tween,startTime);}
synchronizeCharacterBounds(){if(this.isConnected===false){return;}
const svg=this.closest('svg');if(svg!=null&&svg.getAttribute('s-c')!=null){return;}
const selfBounds=this.getBoundingClientRect();this.boundsForMoveCharacter=selfBounds;const x=selfBounds.x;const y=selfBounds.y;const width=selfBounds.width;const height=selfBounds.height;this.setCharacterBounds(x,y,width,height);const event=new CustomEvent('synchronizeCharacterBounds',{'detail':{}});this.dispatchEvent(event);}
getCharacterBounds(){return this.character.getBounds();}
getCharacterPointerEventDetectionBounds(){return this.character.getPointerEventDetectionBounds();}
updatePointerEventDetectionElementBounds(x,y,width,height){this.getCharacterPointerEventDetectionBounds().then((characterBounds)=>{const canvasZoneX=characterBounds.canvasZoneX;const canvasZoneY=characterBounds.canvasZoneY;const characterBoundsX=characterBounds.x;const characterBoundsY=characterBounds.y;const characterBoundsWidth=characterBounds.width;const characterBoundsHeight=characterBounds.height;const scale=width/this.offsetWidth;const xDifference=characterBoundsX-(x-canvasZoneX);const yDifference=characterBoundsY-(y-canvasZoneY);this.setPointerEventDetectionElementBounds(xDifference/scale,yDifference/scale,characterBoundsWidth/scale,characterBoundsHeight/scale);});}
setPointerEventDetectionElementBounds(x,y,width,height){this.pointerEventDetectionElement.setBounds(x,y,width,height);}
setCharacterBounds(x,y,width,height){this.character.setBounds(x,y,width,height);this.updatePointerEventDetectionElementBounds(x,y,width,height);}
setCharacterHeadOrientation(orientation,tween,duration,delegate){const familyName=this.getCharacterFamilyName()
this.clearHeadOrientationRegister()
const headOrientation=orientation?orientation:this.headOrientation
if(headOrientation===FACE_CAMERA_HEAD_ORIENTATION){this.headOrientationRegister=this.character.setHeadFaceCamera(familyName,tween,duration,delegate)}else if(headOrientation===HORIZONTAL_HEAD_ORIENTATION){this.headOrientationRegister=this.character.setHeadHorizontal(familyName)}else{function parseRotationQuaternion(input){const regex=/^rotationQuaternion\(([-+]?\d*\.?\d+),\s*([-+]?\d*\.?\d+),\s*([-+]?\d*\.?\d+),\s*([-+]?\d*\.?\d+)\)$/;const match=input.match(regex);if(match){return{x:parseFloat(match[1]),y:parseFloat(match[2]),z:parseFloat(match[3]),w:parseFloat(match[4])};}
return null;};const rotationQuaternionInfo=parseRotationQuaternion(headOrientation);if(rotationQuaternionInfo!=null){this.headOrientationRegister=this.setHeadRotationQuaternion(familyName,tween,duration,delegate,rotationQuaternionInfo);}}}
setHeadRotationQuaternion(familyName,tween,duration,delegate,rotationQuaternionInfo){return this.character.setHeadRotationQuaternion(familyName,tween,duration,delegate,rotationQuaternionInfo);}
clearHeadOrientationRegister(){if(this.headOrientationRegister){this.character?.resetHeadOrientation(this.headOrientationRegister)}
this.headOrientationRegister=null}
disposeSpeechTweens(){const localSpeechTweens=this.speechTweens;if(localSpeechTweens!=null){delete this.speechTweens;localSpeechTweens.forEach((eachSpeechTween)=>{eachSpeechTween.kill();});}}
disposeHeadOrientationTweens(){const localHeadOrientationTweens=this.headOrientationTweens;if(localHeadOrientationTweens!=null){delete this.headOrientationTweens;localHeadOrientationTweens.forEach((eachHeadOrientationTween)=>{eachHeadOrientationTween.kill();});}}
createSound(audioUrl,audioDuration,audioInfos){return this.character.createSound(audioUrl,audioDuration,audioInfos);}
disposeNonUsingSounds(audioUrlsAndInfos){this.soundsRepository.disposeNonUsingSounds(audioUrlsAndInfos);}
getSound(audioUrl,audioInfos){return this.soundsRepository.getSound(audioUrl,audioInfos);}
addSound(audioUrl,sound,audioInfos){this.soundsRepository.addSound(audioUrl,sound,audioInfos);}
buildTimelineForSpeeches(speeches,externalTimeline){const characterFamilyName=this.getCharacterFamilyName();const allAudioUrlsAndInfos=(()=>{if(speeches!=null&&speeches.length>0){return speeches.map((eachSpeech)=>{return{id:eachSpeech.id,audioId:eachSpeech.audioId,pageAnimationAudioId:eachSpeech.pageAnimationAudioId,startTime:eachSpeech.startTime,duration:eachSpeech.duration,name:eachSpeech.name,trimmedStartTime:eachSpeech.trimmedStartTime,trimmedEndTime:eachSpeech.trimmedEndTime,volume:eachSpeech.volume,audioUrl:eachSpeech.audioUrl,audioDuration:eachSpeech.audioDuration,characterFamilyName:characterFamilyName,text:eachSpeech.text,voiceModel:eachSpeech.voiceModel,blendShapes:eachSpeech.blendShapes,spectrum:eachSpeech.spectrum};});}
return null;})();this.disposeNonUsingSounds(allAudioUrlsAndInfos);this.disposeSpeechTweens();if(speeches==null||speeches.length===0){return;}
this.speechTweens=[];speeches.forEach((eachSpeech)=>{const{id,audioId,pageAnimationAudioId,startTime,duration,name,trimmedStartTime,trimmedEndTime,volume,audioUrl,audioDuration,characterFamilyName,text,voiceModel,blendShapes,spectrum}=eachSpeech;const audioInfos={id,audioId,pageAnimationAudioId,startTime,duration,name,trimmedStartTime,trimmedEndTime,volume,audioUrl,audioDuration,characterFamilyName,text,voiceModel,blendShapes,spectrum};const sound=(()=>{const existingSound=this.getSound(audioUrl,audioInfos);if(existingSound!=null){existingSound.pause();return existingSound;}
const newSound=this.createSound(audioUrl,audioDuration,audioInfos);this.addSound(audioUrl,newSound,audioInfos);return newSound;})();const isNotExitOnSeekBackward=()=>{return startTime<=0}
const tweenEntered=()=>{const tweenProgressRatio=eachSpeechTween.progress();const currentAudioTime=duration*tweenProgressRatio;sound.setActive(tweenProgressRatio<1);sound.seek(currentAudioTime).then(()=>{}).catch((errorMessage)=>{console.error(errorMessage);});};const tweenExited=()=>{sound.setActive(false);};const eachSpeechTween=createTweenWithEnterAndExitCallback(duration,tweenEntered,tweenExited,isNotExitOnSeekBackward);this.addSpeechTween(eachSpeechTween);externalTimeline.add(eachSpeechTween,startTime);});}
buildHeadOrientationByActionsTimeline(headOrientations,externalTimeline,timelineEndTime,characterStartTime){this.clearHeadOrientationRegister()
delete this.headOrientation;this.disposeHeadOrientationTweens();headOrientations=(()=>{let result=[];if(headOrientations!=null&&headOrientations.length>0){headOrientations.forEach((eachHeadOrientation)=>{eachHeadOrientation=cloneObject(eachHeadOrientation);let removeHeadOrientation=false;const newHeadOrientations=[];this.iterateActions((eachAction)=>{if(removeHeadOrientation){return;}
const actionHeadOrientation=eachAction.headOrientation;if(actionHeadOrientation==null){return;}
let headOrientationStartTime=eachHeadOrientation.startTime;let headOrientationDuration=eachHeadOrientation.duration;let headOrientationEndTime=headOrientationStartTime+headOrientationDuration;const actionBlendDuration=getActionBlendDuration(eachAction);const actionStartTime=characterStartTime+eachAction.startTime-actionBlendDuration;const actionDuration=actionBlendDuration+getActionActualDuration(eachAction)*eachAction.playCount;const actionEndTime=actionStartTime+actionDuration;if(headOrientationStartTime>=actionStartTime&&headOrientationEndTime<=actionEndTime){removeHeadOrientation=true;}else if(actionStartTime>headOrientationStartTime&&actionEndTime<headOrientationEndTime){const endingHeadOrientation=cloneObject(eachHeadOrientation);const startingHeadOrientation=eachHeadOrientation;endingHeadOrientation.startTime=actionEndTime;endingHeadOrientation.duration=headOrientationEndTime-endingHeadOrientation.startTime;headOrientationEndTime=actionStartTime;headOrientationDuration=headOrientationEndTime-headOrientationStartTime;startingHeadOrientation.duration=headOrientationDuration;newHeadOrientations.push(endingHeadOrientation);}else if(headOrientationStartTime<actionStartTime&&headOrientationEndTime<=actionEndTime){headOrientationEndTime=actionStartTime;headOrientationDuration=headOrientationEndTime-headOrientationStartTime;eachHeadOrientation.duration=headOrientationDuration;}else if(headOrientationStartTime>=actionStartTime&&headOrientationStartTime<actionEndTime&&headOrientationEndTime>actionEndTime){headOrientationStartTime=actionEndTime;headOrientationDuration=headOrientationEndTime-headOrientationStartTime;eachHeadOrientation.startTime=headOrientationStartTime;eachHeadOrientation.duration=headOrientationDuration;}});if(removeHeadOrientation===false){result.push(eachHeadOrientation);}
if(newHeadOrientations.length>0){result=result.concat(newHeadOrientations);}});}
this.iterateActions((eachAction,indexOfEachAction,allActions)=>{let actionHeadOrientation=eachAction.headOrientation;if(actionHeadOrientation===FOLLOW_PREVIOUS_ACTION_HEAD_ORIENTATION){actionHeadOrientation=null;for(let i=indexOfEachAction-1;i>=0;i--){const prevAction=this.actions[i];if(prevAction.headOrientation!==FOLLOW_PREVIOUS_ACTION_HEAD_ORIENTATION){actionHeadOrientation=prevAction.headOrientation;break;}}}
if(actionHeadOrientation==null){return;}
const actionBlendDuration=getActionBlendDuration(eachAction);const startTime=characterStartTime+eachAction.startTime-actionBlendDuration;const isLastActionStatus=indexOfEachAction===allActions.length-1;const tempDuration=(()=>{if(isLastActionStatus===false){const nextAction=allActions[indexOfEachAction+1];const endTime=characterStartTime+nextAction.startTime;return actionBlendDuration+(endTime-startTime);}
return actionBlendDuration+getActionActualDuration(eachAction)*eachAction.playCount;})();const duration=tempDuration>0?tempDuration:0.001;const orientation=(()=>{if(actionHeadOrientation===FACE_CAMERA_HEAD_ORIENTATION||actionHeadOrientation===HORIZONTAL_HEAD_ORIENTATION){return actionHeadOrientation;}
const{x,y,z,w}=actionHeadOrientation;return `rotationQuaternion(${x}, ${y}, ${z}, ${w})`;})();const actionHeadOrientationInfo={startTime,duration,orientation:orientation};if(isLastActionStatus){actionHeadOrientationInfo.keepApply=true;}
result.push(actionHeadOrientationInfo);});return result;})();if(headOrientations==null||headOrientations.length===0){return;}
this.headOrientationTweens=[];const angleThreshold=0.1;const timeThreshold=0.1;const quaternionStringToArray=(q)=>{let regex=/-?\d+(\.\d+)?/g;let matches=q.match(regex);let quaternionArray=matches.map(parseFloat);return quaternionArray;};const compareQuaternionAngles=(q1,q2)=>{const dotProduct=q1.reduce((acc,val,idx)=>acc+val*q2[idx],0);const angle=2*Math.acos(Math.abs(dotProduct));return angle;};const combineItemsWithSameOrientation=(headOrientationArray)=>{const result=[];const orientationMap={};headOrientationArray.forEach(itm=>{let key=itm.orientation;if(key.includes('rotationQuaternion')){key=key.substring(0,key.indexOf('('));};if(orientationMap[key]){const lastItm=result[result.length-1];const mergeItems=()=>{lastItm.duration=lastItm.duration+itm.duration;if(itm.keepApply){lastItm.keepApply=true;}};if(lastItm.orientation.includes('rotationQuaternion')&&itm.orientation.includes('rotationQuaternion')){let q1=quaternionStringToArray(lastItm.orientation);let q2=quaternionStringToArray(itm.orientation);let angle=compareQuaternionAngles(q1,q2);if(angle<=angleThreshold&&itm.startTime-(lastItm.startTime+lastItm.duration)<=timeThreshold){mergeItems();}else{result.push(itm);}}else{if(lastItm.orientation===itm.orientation&&itm.startTime-(lastItm.startTime+lastItm.duration)<=timeThreshold){mergeItems();}else{result.push(itm);}}}else{orientationMap[key]=true;result.push(itm);}});return result;};if(headOrientations!=null&&headOrientations.length>0){headOrientations=combineItemsWithSameOrientation(headOrientations);};if(headOrientations!=null&&headOrientations.length>0){headOrientations.forEach((eachHeadOrientation,indexOfEachHeadOrientation)=>{const{startTime,duration,orientation}=eachHeadOrientation;const isLastHeadOrientation=indexOfEachHeadOrientation===headOrientations.length-1;const isStartFromFirstFrame=()=>{return startTime<=0}
const isEndUntilLastFrame=()=>{const endTime=startTime+duration
return(timelineEndTime||externalTimeline.duration())-endTime<1e-6}
const delegate={isNoStartBlending:()=>{return isStartFromFirstFrame()},isNoEndBlending:()=>{return isEndUntilLastFrame()||(isLastHeadOrientation&&eachHeadOrientation['keepApply']);}}
const isNotExitOnSeekBackward=()=>{return isStartFromFirstFrame()}
const isNotExitOnComplete=()=>{return isEndUntilLastFrame()||(isLastHeadOrientation&&eachHeadOrientation['keepApply']);}
const tweenEntered=(tween)=>{if(this.headOrientation!==orientation){this.headOrientation=orientation;this.setCharacterHeadOrientation(orientation,tween,duration,delegate);}};const tweenExited=()=>{this.headOrientation=null;this.clearHeadOrientationRegister();};const eachHeadOrientationTween=createTweenWithEnterAndExitCallback(duration,tweenEntered,tweenExited,isNotExitOnSeekBackward,isNotExitOnComplete);this.addHeadOrientationTween(eachHeadOrientationTween);externalTimeline.add(eachHeadOrientationTween,startTime);})}}
afterBuildAllTimeline(playheadTime,headOrientations,externalTimeline){const totalDuration=externalTimeline.duration()
const restoreEndHeadOrientation=()=>{const isPlayheadTimeAtTheEnd=totalDuration-playheadTime<1e-6
if(!isPlayheadTimeAtTheEnd)return
if(headOrientations!=null&&headOrientations.length>0){headOrientations.forEach((eachHeadOrientation)=>{const{startTime,duration,orientation}=eachHeadOrientation;const isEndUntilLastFrame=(()=>{const endTime=startTime+duration
return totalDuration-endTime<1e-6})()
if(eachHeadOrientation['keepApply']||isEndUntilLastFrame){if(this.headOrientation!==orientation){this.headOrientation=orientation;this.setCharacterHeadOrientation(orientation);}}})}}
restoreEndHeadOrientation()}
addSpeechTween(eachSpeechTween){this.speechTweens.push(eachSpeechTween);}
addHeadOrientationTween(eachHeadOrientationTween){this.headOrientationTweens.push(eachHeadOrientationTween);}
getTimelineTime(){return this.timeline.time();}
getTimelineDuration(){return this.timeline.duration();}
setZIndex(zIndex){this.character.setZIndex(zIndex);}
showPoseEditor(owner,actionId,options){return this.character.showPoseEditor(owner,actionId,options);}
updateWithPoseData(actionId,poseData){return this.character.updateWithPoseData(actionId,poseData,this.timeline);}
alignBottomBodyWithPreviousAction(actionDetails,previousActionDetails){return this.character.alignBottomBodyWithPreviousAction(actionDetails,previousActionDetails);}
flattenActionWithRepeatWithPatchData(actionDetails){return this.character.flattenActionWithRepeatWithPatchData(actionDetails);}
getAnimationGroupDeltaForConvertPoseToAction(actionDetails){return this.character.getAnimationGroupDeltaForConvertPoseToAction(actionDetails);}
getPatchedAnimationGroupDataForCustomizations(actionDetails,customizations){return this.character.getPatchedAnimationGroupDataForCustomizations(actionDetails,customizations);}
getPatchedAnimationGroupDataWithDuration(actionDetails,characterFamilyName,dataObjectOfPoseData,previousActionDetails){return this.character.getPatchedAnimationGroupDataWithDuration(actionDetails,characterFamilyName,dataObjectOfPoseData,previousActionDetails);}
mergeAnimationGroups(allActionDetails,metadata){return this.character.mergeAnimationGroups(allActionDetails,metadata);}
mergeAnimationGroupsAndReturnAnimationGroupDeltaAndDuration(allActionDetails){return this.character.mergeAnimationGroupsAndReturnAnimationGroupDeltaAndDuration(allActionDetails);}
loadPoseDataFromAction(absoluteActionAssetPath){return this.character.loadPoseDataFromAction(absoluteActionAssetPath);}
getSceneBlobDataAndDurationForAction(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,inPlace,userAssetFileName,customizations,onlyIncludeTime,patchedAnimationGroupData,angle,positionOffset,shoulderPosition,armSpace){return this.character.getSceneBlobDataAndDurationForAction(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,inPlace,userAssetFileName,customizations,onlyIncludeTime,patchedAnimationGroupData,angle,positionOffset,shoulderPosition,armSpace);}
generateAnimatedGifForAction(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,userAssetFileName,customizations,patchedAnimationGroupData,gifJsWorkerScriptUrl,onlyIncludeTime,angle,positionOffset,shoulderPosition,armSpace){return this.character.generateAnimatedGifForAction(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,userAssetFileName,customizations,patchedAnimationGroupData,gifJsWorkerScriptUrl,onlyIncludeTime,angle,positionOffset,shoulderPosition,armSpace);}
generateImage(){return this.character.generateImage();}
showAdjustHeadOrientationEditor(rotationQuaternionInfo){return this.character.showAdjustHeadOrientationEditor(rotationQuaternionInfo);}
hideAdjustHeadOrientationEditor(){this.character.hideAdjustHeadOrientationEditor();}
setActionAngle(actionId,angle){this.character.setActionAngle(actionId,angle);}
setActionShoulderPosition(actionId,shoulderPosition){this.character.setActionShoulderPosition(actionId,shoulderPosition);}
setActionPositionOffset(actionId,horizontal,vertical){this.character.setActionPositionOffset(actionId,horizontal,vertical);}
setActionArmSpace(actionId,armSpace){this.character.setActionArmSpace(actionId,armSpace);}
willDestroyForSetWebComponentNode(){this.character.willDestroyForSetWebComponentNode();}
getCanChangeTextureMaterialNames(){return this.character.getCanChangeTextureMaterialNames();}
setMaterialsOutline(materialsOutline){this.character.setMaterialsOutline(materialsOutline);}
setMaterialImageTextureRotation(materialName,rotation){this.character.setMaterialImageTextureRotation(materialName,rotation);}
setMaterialImageTextureScale(materialName,scale){this.character.setMaterialImageTextureScale(materialName,scale);}
setMaterialColorTexture(materialName,color){this.character.setMaterialColorTexture(materialName,color);}
createApi(){const result={};const selfAsCharacter3d=this;result.setMaterialColorTexture=(materialName,color)=>{selfAsCharacter3d.setMaterialColorTexture(materialName,color);};result.setMaterialsOutline=(materialsOutline)=>{selfAsCharacter3d.setMaterialsOutline(materialsOutline);}
result.willDestroyForSetWebComponentNode=()=>{selfAsCharacter3d.willDestroyForSetWebComponentNode();};result.getCanChangeTextureMaterialNames=function(){return selfAsCharacter3d.getCanChangeTextureMaterialNames();};result.setMaterialImageTextureRotation=function(materialName,rotation){selfAsCharacter3d.setMaterialImageTextureRotation(materialName,rotation);};result.setMaterialImageTextureScale=function(materialName,scale){selfAsCharacter3d.setMaterialImageTextureScale(materialName,scale);};result.showAdjustHeadOrientationEditor=function(rotationQuaternionInfo){return selfAsCharacter3d.showAdjustHeadOrientationEditor(rotationQuaternionInfo);};result.hideAdjustHeadOrientationEditor=function(){return selfAsCharacter3d.hideAdjustHeadOrientationEditor();};result.setActionAngle=function(actionId,angle){selfAsCharacter3d.setActionAngle(actionId,angle);};result.setActionShoulderPosition=function(actionId,shoulderPosition){selfAsCharacter3d.setActionShoulderPosition(actionId,shoulderPosition);};result.setActionPositionOffset=function(actionId,horizontal,vertical){selfAsCharacter3d.setActionPositionOffset(actionId,horizontal,vertical);};result.setActionArmSpace=function(actionId,armSpace){selfAsCharacter3d.setActionArmSpace(actionId,armSpace);};result.loadPoseDataFromAction=function(absoluteActionAssetPath){return selfAsCharacter3d.loadPoseDataFromAction(absoluteActionAssetPath);};result.generateAnimatedGifForAction=function(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,userAssetFileName,customizations,patchedAnimationGroupData,gifJsWorkerScriptUrl,onlyIncludeTime,angle,positionOffset,shoulderPosition,armSpace){return selfAsCharacter3d.generateAnimatedGifForAction(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,userAssetFileName,customizations,patchedAnimationGroupData,gifJsWorkerScriptUrl,onlyIncludeTime,angle,positionOffset,shoulderPosition,armSpace);};result.getSceneBlobDataAndDurationForAction=function(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,inPlace,userAssetFileName,customizations,onlyIncludeTime,patchedAnimationGroupData,angle,positionOffset,shoulderPosition,armSpace){return selfAsCharacter3d.getSceneBlobDataAndDurationForAction(actionAssetType,actionAssetUrl,playCount,repeatBlendDuration,startRatio,endRatio,inPlace,userAssetFileName,customizations,onlyIncludeTime,patchedAnimationGroupData,angle,positionOffset,shoulderPosition,armSpace);};result.generateImage=(seekTime)=>{const self=this;return new Promise((resolve,reject)=>{if(seekTime!=null){const lastSeekTime=self.lastSeekTime;self.seek(seekTime).then(()=>{return selfAsCharacter3d.generateImage();}).then((generateImageResult)=>{resolve(generateImageResult);}).catch((errorMessage)=>{reject(errorMessage);}).finally(()=>{self.seek(lastSeekTime).then(()=>{}).catch((errorMessage)=>{reject(errorMessage);});});}else{selfAsCharacter3d.generateImage().then((generateImageResult)=>{resolve(generateImageResult);}).catch((errorMessage)=>{reject(errorMessage);});}});};result.getCharacterObject=()=>{return selfAsCharacter3d.character;};result.mergeAnimationGroups=(allActionDetails,metadata)=>{return selfAsCharacter3d.mergeAnimationGroups(allActionDetails,metadata);};result.mergeAnimationGroupsAndReturnAnimationGroupDeltaAndDuration=(allActionDetails)=>{return selfAsCharacter3d.mergeAnimationGroupsAndReturnAnimationGroupDeltaAndDuration(allActionDetails);};result.alignBottomBodyWithPreviousAction=(actionDetails,previousActionDetails)=>{return selfAsCharacter3d.alignBottomBodyWithPreviousAction(actionDetails,previousActionDetails);};result.flattenActionWithRepeatWithPatchData=(actionDetails)=>{return selfAsCharacter3d.flattenActionWithRepeatWithPatchData(actionDetails);};result.getAnimationGroupDeltaForConvertPoseToAction=(actionDetails)=>{return selfAsCharacter3d.getAnimationGroupDeltaForConvertPoseToAction(actionDetails);};result.getPatchedAnimationGroupDataForCustomizations=(actionDetails,customizations)=>{return selfAsCharacter3d.getPatchedAnimationGroupDataForCustomizations(actionDetails,customizations);};result.getPatchedAnimationGroupDataWithDuration=(actionDetails,characterFamilyName,dataObjectOfPoseData,previousActionDetails)=>{return selfAsCharacter3d.getPatchedAnimationGroupDataWithDuration(actionDetails,characterFamilyName,dataObjectOfPoseData,previousActionDetails);};result.updateWithPoseData=(actionId,poseData)=>{return selfAsCharacter3d.updateWithPoseData(actionId,poseData);};result.showPoseEditor=(owner,actionId,options)=>{return selfAsCharacter3d.showPoseEditor(owner,actionId,options);};result.setZIndex=(zIndex)=>{selfAsCharacter3d.setZIndex(zIndex);};result.buildTimelineForSpeeches=(speeches,externalTimeline)=>{selfAsCharacter3d.buildTimelineForSpeeches(speeches,externalTimeline);};result.buildMoveCharacterByActionsTimeline=(playheadTime,externalTimeline,positions,zoomRatio)=>{selfAsCharacter3d.buildMoveCharacterByActionsTimeline(playheadTime,externalTimeline,positions,zoomRatio);};result.buildHeadOrientationByActionsTimeline=(headOrientations,externalTimeline,timelineEndTime,characterStartTime)=>{selfAsCharacter3d.buildHeadOrientationByActionsTimeline(headOrientations,externalTimeline,timelineEndTime,characterStartTime);}
result.afterBuildAllTimeline=(playheadTime,headOrientations,externalTimeline)=>{selfAsCharacter3d.afterBuildAllTimeline(playheadTime,headOrientations,externalTimeline);}
result.afterRender=()=>{};result.synchronizeCharacterBounds=()=>{selfAsCharacter3d.synchronizeCharacterBounds();};result.preparePlay=()=>{return new Promise((resolve,reject)=>{resolve();});};result.isConnected=()=>{return selfAsCharacter3d.isConnected;};result.getActionObjectById=(id)=>{return selfAsCharacter3d.getActionObject(id);};result.getDuration=()=>{let result=0;selfAsCharacter3d.iterateActions((eachAction)=>{const startTime=eachAction.startTime;const duration=(()=>{if(isSingleFrameForAction(eachAction)){const repeatDuration=eachAction.repeatDuration;if(repeatDuration!=null&&repeatDuration>0){return repeatDuration;}}
const actionActualDuration=getActionActualDuration(eachAction);const playCount=eachAction.playCount;return actionActualDuration*playCount;})();const endTime=startTime+duration;if(endTime>result){result=endTime;}});return result;};result.ensureReadyForSeekCapture=()=>{return selfAsCharacter3d.ensureReadyForSeekCapture();};result.initForSeekCapture=()=>{selfAsCharacter3d['initForSeekCapture']();};result.play=()=>{return new Promise((resolve,reject)=>{selfAsCharacter3d.play();resolve();});};result.playForTimeline=()=>{return this.play();};result.pause=()=>{return new Promise((resolve,reject)=>{selfAsCharacter3d.pause();resolve();});};result.pauseForTimeline=()=>{return this.pause();};result.seek=(time,timeRelativeToAction)=>{return new Promise((resolve,reject)=>{const shouldSeekTimeline=undefined;const preferredSeekToAction=undefined;selfAsCharacter3d.seek(time,shouldSeekTimeline,preferredSeekToAction,timeRelativeToAction);resolve();});};result.seekForTimeline=(time)=>{return this.seek(time);};result.getCharacterBounds=()=>{return selfAsCharacter3d.getCharacterBounds();};var alreadyDestroyed=false;result.destroy=()=>{if(alreadyDestroyed){return;}
alreadyDestroyed=true;selfAsCharacter3d.destroy();};return result;}
fireApiReady(){const localApi=this.api;const event=new CustomEvent('apiReady',{'detail':{'api':localApi}});this.dispatchEvent(event);}
fireCharacterReloaded(){const localApi=this.api;const event=new CustomEvent('characterReloaded',{'detail':{}});this.dispatchEvent(event);}
setVisible(visible){this.character.setVisible(visible);}
setVisibleAsPromise(visible){return this.character.setVisibleAsPromise(visible);}
setCharacterApi(apiParameter){this.character.api=apiParameter;}
loadAllBlendActions(){return new Promise((resolve,reject)=>{const allBlendActions=(()=>{const result={};const array=[];result.add=(eachBlendAction)=>{array.push(eachBlendAction);};result.concat=(normalizedActionsParameter)=>{return array.concat(normalizedActionsParameter);};return result;})();const workingWindow=getWorkingWindow();const localCharacter3dController=workingWindow.character3dController;localCharacter3dController.fromElement(this).then((elementCharacter3dController)=>{const loadActionsPromises=[];const validateBlendDuration=function(blendDuration,previousAction,actionStartTime){const workingWindow=getWorkingWindow();return workingWindow[VALIDATE_CHARACTER_3D_BLEND_DURATION_FUNCTION_NAME](blendDuration,previousAction.startTime,actionStartTime);};let previousAction=null;this.iterateNormalizedActions((eachAction)=>{if(previousAction!=null){const repeatForAction=eachAction.repeatForAction;let blendDuration=repeatForAction!=null?repeatForAction.repeatBlendDuration:eachAction.blendDuration;if(blendDuration!=null){const startTime=eachAction.startTime;blendDuration=validateBlendDuration(blendDuration,previousAction,startTime);const blendActionStartTime=startTime-blendDuration;const actionStartTime=eachAction.startTime;if(blendActionStartTime+blendDuration>actionStartTime){blendDuration=actionStartTime-blendActionStartTime;}
const blendAction={id:`${previousAction.id} -> ${eachAction.id}`,startTime:blendActionStartTime,duration:blendDuration,startRatio:0,endRatio:1,isBlendAction:true,previousAction:previousAction,currentAction:eachAction};allBlendActions.add(blendAction);previousAction.endBlendAction=blendAction;let previousActionStartTime=previousAction.startTime;let previousActionSpeed=previousAction.speed;const actionSpeed=eachAction.speed;loadActionsPromises.push(new Promise((resolve,reject)=>{let previousActionObject=this.getActionObject(previousAction.id);const actionObject=this.getActionObject(eachAction.id);if(previousActionObject==null||actionObject==null){resolve();return;}
if(blendActionStartTime<previousActionStartTime){var previousActionRepeatForAction=previousAction.repeatForAction;if(previousActionRepeatForAction!=null){previousActionObject=this.getActionObject(previousActionRepeatForAction.id);previousActionStartTime=previousActionRepeatForAction.startTime;}}
const blendEasing=eachAction.blendEasing;this.loadBlendAction(elementCharacter3dController,previousActionObject,actionObject,blendActionStartTime,blendDuration,blendEasing,previousActionStartTime,previousActionSpeed,actionSpeed).then((blendActionObject)=>{this.actionLoaded(blendAction.id,blendActionObject);this.addBlendActionId(blendAction.id);resolve();}).catch((errorMessage)=>{reject(errorMessage);});}));}}
previousAction=eachAction;});return Promise.all(loadActionsPromises);}).then(()=>{this.normalizedActions=allBlendActions.concat(this.normalizedActions);resolve();}).catch((errorMessage)=>{reject(errorMessage);});});}
addDelayedCallToTimeline(funct,position){const delayTime=0;const delayedCall=gsap.delayedCall(delayTime,funct);this.addDelayedCall(delayedCall);this.timelineAddTween(delayedCall,position);return delayedCall;}
clearTimeline(){this.timeline.clear();this.killAllDelayedCalls();if(this.moveCharacterByActionsTweens!=null){this.destroyMoveCharacterByActionsTweens();}}
killTimeline(){this.timeline.kill();}
delayedCalls=(()=>{let array=[];return{add:(eachDelayedCall)=>{array.push(eachDelayedCall);},killAll:()=>{if(array.length>0){array.forEach((eachDelayedCall)=>{eachDelayedCall.kill();});array=[];}}};})();addDelayedCall(eachDelayedCall){this.delayedCalls.add(eachDelayedCall);}
killAllDelayedCalls(){this.delayedCalls.killAll();}
buildTimelineForActions(){return new Promise((resolve,reject)=>{this.clearTimeline();const handleNormalizedActions=()=>{return new Promise((resolve,reject)=>{const localNormalizedActions=this.normalizedActions;const normalizedActionCount=localNormalizedActions.length;let nextNormalizedActionIndex=0;const performHandleNextNormalizedActionIndex=()=>{return new Promise((resolve,reject)=>{const eachAction=localNormalizedActions[nextNormalizedActionIndex];const startTime=eachAction.startTime;const duration=(()=>{if(isSingleFrameForAction(eachAction)){const repeatDuration=eachAction.repeatDuration;if(repeatDuration!=null&&repeatDuration>0){return repeatDuration;}}
return getActionActualDuration(eachAction);})();this.timelineTo({progress:0},{progress:1,duration:duration},startTime);this.addDelayedCallToTimeline(()=>{if(this.isPlaying()){this.seekWithoutSeekTimeline(startTime,eachAction).then(()=>{}).catch((errorMessage)=>{console.error(errorMessage);});}},startTime);this.addDelayedCallToTimeline(()=>{if(this.isPlaying()){this.seekWithoutSeekTimeline(startTime+duration,eachAction).then(()=>{if(eachAction.pauseWhenEnd){const actionId=eachAction.id;const actionObject=this.getActionObject(actionId);if(actionObject!=null){actionObject.pause().then(()=>{}).catch((errorMessage)=>{console.error(errorMessage);});}}}).catch((errorMessage)=>{console.error(errorMessage);});}},startTime+duration);resolve();});};const handleNextNormalizedActionIndex=()=>{if(nextNormalizedActionIndex<normalizedActionCount){performHandleNextNormalizedActionIndex().then(()=>{nextNormalizedActionIndex++;handleNextNormalizedActionIndex();}).catch((errorMessage)=>{reject(errorMessage);});}else{resolve();}};handleNextNormalizedActionIndex();});};const handleActions=()=>{return new Promise((resolve,reject)=>{if(this.actions==null){reject();return;}
const allPromises=[];const localTimeline=this.timeline;this.iterateActions((eachAction)=>{const actionId=eachAction.id;const actionObject=this.getActionObject(actionId);if(actionObject!=null){allPromises.push(actionObject.buildTimeline(localTimeline));}});Promise.all(allPromises).then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});});};handleNormalizedActions().then(()=>{return handleActions();}).then(()=>{resolve();}).catch((errorMessage)=>{reject(errorMessage);});});}
getPropertyFromAnimationsJsonObject(propertyName){const animationsJsonObject=this.getAnimationsJsonObject();return animationsJsonObject[propertyName];}
getActionsPropertyValue(){return this.getPropertyFromAnimationsJsonObject('actions');}
getInitialImage(){const character3dLoadingUrl=this.getCharacterLoadingUrl();if(character3dLoadingUrl!=null){return character3dLoadingUrl;}
return this.getPropertyFromAnimationsJsonObject('initialImage');}
getCharacterLoadingUrl(){return CHARACTER_3D_LOADING_URL;}
getCharacterFamilyName(){return this.getPropertyFromAnimationsJsonObject('characterFamilyName');}
getCharacterAssetId(){return this.getPropertyFromAnimationsJsonObject('characterAssetId');}
getTexture(){return this.getPropertyFromAnimationsJsonObject('texture');}
getFlipH(){return this.getPropertyFromAnimationsJsonObject('flipH');}
getFlipV(){return this.getPropertyFromAnimationsJsonObject('flipV');}
hasWaitForCharacterLoadedQueue(){return this.waitForCharacterLoadedQueue!=null;}
fireWaitForCharacterLoadedQueueEndLoadCharacter(){this.waitForCharacterLoadedQueue.endLoadCharacter();}
loadFromAnimationsJsonObject(){const animationsJsonObject=this.getAnimationsJsonObject();const localGetPropertyFromAnimationsJsonObject=(propertyName)=>{return animationsJsonObject[propertyName];};const characterAssetId=localGetPropertyFromAnimationsJsonObject('characterAssetId');const characterFamilyName=localGetPropertyFromAnimationsJsonObject('characterFamilyName');const flipH=localGetPropertyFromAnimationsJsonObject('flipH');const flipV=localGetPropertyFromAnimationsJsonObject('flipV');const texture=localGetPropertyFromAnimationsJsonObject('texture');this.actions=localGetPropertyFromAnimationsJsonObject('actions');this.postSetActionsAction();let characterReclaimed=false;const workingWindow=getWorkingWindow();const localCharacter3dController=workingWindow.character3dController;localCharacter3dController.fromElement(this).then((elementCharacter3dController)=>{return elementCharacter3dController.loadCharacterWithDetails(characterAssetId,characterFamilyName,flipH,flipV,texture,this);}).then((resultOfLoadCharacterWithDetails)=>{this.character=resultOfLoadCharacterWithDetails['character'];const details=resultOfLoadCharacterWithDetails['details'];characterReclaimed=details['reclaimed'];if(characterReclaimed){this.hidePreview();}
if(this.hasWaitForCharacterLoadedQueue()){this.fireWaitForCharacterLoadedQueueEndLoadCharacter();delete this.waitForCharacterLoadedQueue;}
return this.characterLoaded();}).then(()=>{return this.loadAllBlendActions();}).then(()=>{return this.buildTimelineForActions();}).then(()=>{if(this.character==null){return;}
if(characterReclaimed){this.character.fireReloadForReclaimed();}
this.hidePreview();this.setVisibleAsPromise(true).then(()=>{this.synchronizeCharacterBounds();const localApi=this.createApi();this.api=localApi;this.setCharacterApi(localApi);this.fireApiReady();}).catch((errorMessage)=>{console.error(errorMessage);});}).catch((errorMessage)=>{console.error(errorMessage);});}};window.customElements.define('character-3d',Character3D);}})();